// Generated by gencpp from file ytu_racing_msgs/ConeArray.msg
// DO NOT EDIT!


#ifndef YTU_RACING_MSGS_MESSAGE_CONEARRAY_H
#define YTU_RACING_MSGS_MESSAGE_CONEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ytu_racing_msgs/Cone.h>

namespace ytu_racing_msgs
{
template <class ContainerAllocator>
struct ConeArray_
{
  typedef ConeArray_<ContainerAllocator> Type;

  ConeArray_()
    : cones()  {
    }
  ConeArray_(const ContainerAllocator& _alloc)
    : cones(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ytu_racing_msgs::Cone_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ytu_racing_msgs::Cone_<ContainerAllocator> >> _cones_type;
  _cones_type cones;





  typedef boost::shared_ptr< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> const> ConstPtr;

}; // struct ConeArray_

typedef ::ytu_racing_msgs::ConeArray_<std::allocator<void> > ConeArray;

typedef boost::shared_ptr< ::ytu_racing_msgs::ConeArray > ConeArrayPtr;
typedef boost::shared_ptr< ::ytu_racing_msgs::ConeArray const> ConeArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ytu_racing_msgs::ConeArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ytu_racing_msgs::ConeArray_<ContainerAllocator1> & lhs, const ::ytu_racing_msgs::ConeArray_<ContainerAllocator2> & rhs)
{
  return lhs.cones == rhs.cones;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ytu_racing_msgs::ConeArray_<ContainerAllocator1> & lhs, const ::ytu_racing_msgs::ConeArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ytu_racing_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35f5f726c9b508250d80987015aa13a4";
  }

  static const char* value(const ::ytu_racing_msgs::ConeArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35f5f726c9b50825ULL;
  static const uint64_t static_value2 = 0x0d80987015aa13a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ytu_racing_msgs/ConeArray";
  }

  static const char* value(const ::ytu_racing_msgs::ConeArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Cone[] cones\n"
"================================================================================\n"
"MSG: ytu_racing_msgs/Cone\n"
"uint8 YELLOW=0\n"
"uint8 BLUE=1\n"
"uint8 ORANGE=2\n"
"uint8 UNKNOWN=3\n"
"\n"
"geometry_msgs/Pose pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::ytu_racing_msgs::ConeArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cones);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConeArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ytu_racing_msgs::ConeArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ytu_racing_msgs::ConeArray_<ContainerAllocator>& v)
  {
    s << indent << "cones[]" << std::endl;
    for (size_t i = 0; i < v.cones.size(); ++i)
    {
      s << indent << "  cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ytu_racing_msgs::Cone_<ContainerAllocator> >::stream(s, indent + "    ", v.cones[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YTU_RACING_MSGS_MESSAGE_CONEARRAY_H
